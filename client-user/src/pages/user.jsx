import Image from "next/image";
import logo from "@/public/log.png";
import { useRouter } from "next/router";
import { useSettingsMutation } from "@/features/apiUser";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useChangeMutation } from "@/features/apiUser";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useChangePasswordMutation } from "@/features/apiUser";
export default function User() {
  let [settings] = useSettingsMutation();
  let [changePassword] = useChangePasswordMutation();
  let [data, setData] = useState({ name: "", address: "" });
  let [pw, setPw] = useState({ newPw: "", oldPw: "" });
  let [change] = useChangeMutation();
  let router = useRouter();
  let toHome = (e) => {
    e.preventDefault();
    router.push("/");
  };
  useEffect(() => {
    settings(localStorage.access_token).then((res) => {
      if (res.data) {
        setData({ name: res.data.name, address: res.data.address });
      }
    });
  }, []);
  let submitChangeDetails = (e) => {
    e.preventDefault();
    if (!data.name) {
      toast.warn("Please add your name", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
    }
    if (!data.address) {
      toast.warn("Please add your address", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
    }
    if (data.name && data.address) {
      change(data).then((res) => {
        toast.success(res.data.message, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
      });
    }
  };

  const handleChangeDetails = (e) => {
    const value = e.target.value;
    const name = e.target.name;

    setData({
      ...data,
      [name]: value,
    });
  };
  const handleChangePassword = (e) => {
    const value = e.target.value;
    const name = e.target.name;

    setPw({
      ...pw,
      [name]: value,
    });
  };

  let showOldPw = (e) => {
    e.preventDefault();
    let temp = document.getElementById("oldPw");
    let but = document.getElementById("oldShow");
    if (temp.type === "password") {
      temp.type = "text";
      but.innerText = "Hide password";
    } else {
      temp.type = "password";
      but.innerText = "Show password";
    }
  };

  let showNewPw = (e) => {
    e.preventDefault();
    let temp = document.getElementById("newPw");
    let but = document.getElementById("newShow");
    if (temp.type === "password") {
      temp.type = "text";
      but.innerText = "Hide password";
    } else {
      temp.type = "password";
      but.innerText = "Show password";
    }
  };

  const submitChangePassword = (e) => {
    e.preventDefault();
    changePassword(pw).then((res) => {
      console.log(res);
      if (res.error) {
        toast.warn(res.error.data.message, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "dark",
        });
      }
    });
  };
  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/log.png" />
      </Head>
      <ToastContainer />
      <div className="h-screen w-screen grid grid-cols-12 grid-rows-6">
        <div className="outline outline-1 col-start-3 col-end-11 row-start-2 row-end-6 grid grid-cols-12 gap-[10px]">
          <div className="col-start-2 col-end-12 flex flex-row py-[10px]">
            <div className="grid content-center w-1/2">
              <div>
                <Image src={logo} className="w-[300px]" />
              </div>
            </div>
            <div className="w-1/2 flex flex-col justify-evenly">
              <div className="flex flex-col gap-y-[10px] ">
                <div className="font-bold">Edit detail user</div>
                <div>
                  <form
                    onSubmit={submitChangeDetails}
                    className=" flex flex-col gap-y-[10px]"
                  >
                    <div>
                      <input
                        onChange={handleChangeDetails}
                        className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                        type="text"
                        placeholder="Your name"
                        value={data?.name}
                        name="name"
                      />
                    </div>
                    <div>
                      <textarea
                        onChange={handleChangeDetails}
                        className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                        name=""
                        id=""
                        cols="10"
                        rows="3"
                        placeholder="Your address"
                        name="address"
                        value={data?.address}
                      />
                    </div>
                    <div className="grid grid-cols-12">
                      <div className="col-start-1 col-end-9">
                        <button className="w-full transition-colors duration-700 ease-in-out text-white rounded bg-[#00ADB5] hover:bg-[#029ca3] py-[4px]">
                          Save
                        </button>
                      </div>
                      <div className="col-start-10 col-span-5">
                        <button
                          onClick={toHome}
                          className="py-[4px] w-full transition-colors duration-700 ease-in-out outline outline-1 outline-[#222831] hover:bg-[#222831] hover:text-white rounded"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  </form>
                </div>
              </div>
              <div className="h-[1px] bg-[#222831]"></div>
              <div className="flex flex-col gap-y-[20px]">
                <div className="font-bold">Change password</div>
                <div>
                  <form
                    onSubmit={submitChangePassword}
                    className="flex flex-col gap-y-[10px]"
                  >
                    <div>
                      <div>
                        <input
                          className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                          type="password"
                          placeholder="New password"
                          onChange={handleChangePassword}
                          value={pw.newPw}
                          name="newPw"
                          id="newPw"
                        />
                      </div>
                      <div>
                        <button
                          onClick={showNewPw}
                          className="italic text-[13px]"
                          id="newShow"
                        >
                          Show password
                        </button>
                      </div>
                    </div>
                    <div>
                      <div>
                        <input
                          className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                          type="password"
                          placeholder="Old password"
                          value={pw.oldPw}
                          name="oldPw"
                          id="oldPw"
                          onChange={handleChangePassword}
                        />
                      </div>
                      <div>
                        <button
                          onClick={showOldPw}
                          className="italic text-[13px]"
                          id="oldShow"
                        >
                          Show password
                        </button>
                      </div>
                    </div>
                    <div className="grid grid-cols-12">
                      <div className="col-start-1 col-end-9">
                        <button className="w-full transition-colors duration-700 ease-in-out text-white rounded bg-[#00ADB5] hover:bg-[#029ca3] py-[4px]">
                          Save
                        </button>
                      </div>
                      <div className="col-start-10 col-span-5">
                        <button
                          onClick={toHome}
                          className="py-[4px] w-full transition-colors duration-700 ease-in-out outline outline-1 outline-[#222831] hover:bg-[#222831] hover:text-white rounded"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
