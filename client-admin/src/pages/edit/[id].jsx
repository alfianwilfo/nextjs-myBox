import Head from "next/head";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { useGetProductByIdQuery } from "@/features/apiProducts";
import { useUpdateProductMutation } from "@/features/apiProducts";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Edit() {
  let router = useRouter();
  let [updateProduct] = useUpdateProductMutation();
  let { data, isLoading } = useGetProductByIdQuery(router.query.id);
  const [input, setInput] = useState({
    name: "",
    brand: "",
    price: "",
    imageUrl: "",
  });
  useEffect(() => {
    !localStorage.access_token ? router.push("/") : null;
  });
  useEffect(() => {
    if (data) {
      setInput(data);
    }
  }, [isLoading]);

  const handleChange = (e) => {
    const value = e.target.value;
    const name = e.target.name;

    setInput({
      ...input,
      [name]: value,
    });
  };
  const cancel = () => {
    router.push("/home");
  };
  const submitProduct = (e) => {
    e.preventDefault();
    console.log(input, "??");
    updateProduct({ id: router.query.id, body: input }).then((res) => {
      console.log(res);
      if (res.data) {
        toast.success(res.data.message, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
        router.push("/home");
      }
      if (res.error) {
        toast.warn(res.error.data.message, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
      }
    });
    // createProduct(input).then((res) => {
    // });
  };
  return (
    <>
      <Head>
        <title>Create product</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/log.png" />
      </Head>
      <div className="h-screen grid grid-cols-12 grid-rows-6">
        <div className="col-start-5 col-end-9 row-start-2 row-span-4 outline outline-1 grid grid-cols-12">
          <div className="col-start-2 col-end-12 flex flex-col gap-y-[50px]">
            <div className="text-center text-[30px] font-semibold">
              Edit product
            </div>
            {!data ? (
              <div>Loading</div>
            ) : (
              <div className="flex flex-col gap-y-[10px]">
                <div>
                  <form
                    onSubmit={submitProduct}
                    className="flex flex-col gap-y-[25px]"
                  >
                    <input
                      className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                      type="text"
                      name="name"
                      placeholder="Product name"
                      onChange={handleChange}
                      value={input?.name}
                    />
                    <input
                      className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                      type="number"
                      name="price"
                      placeholder="Product price"
                      onChange={handleChange}
                      value={input?.price}
                    />
                    <input
                      className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                      type="text"
                      name="brand"
                      placeholder="Name brand"
                      onChange={handleChange}
                      value={input?.brand}
                    />
                    <input
                      className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px]"
                      type="text"
                      name="imageUrl"
                      id=""
                      placeholder="Url image"
                      onChange={handleChange}
                      value={input?.imageUrl}
                    />
                    <button
                      type="submit"
                      className="outline outline-1 outline-[#393E46]/10 focus:outline-[#393E46] p-[10px] w-full rounded-[1px] bg-[#00ADB5]"
                    >
                      Submit
                    </button>
                  </form>
                </div>
                <div>
                  <button
                    onClick={cancel}
                    className="w-full bg-[#EEEEEE] rounded-[1px] p-[10px]"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
}
